"""
Synthetic dataset helpers wrapping PersonaForge.
Provides utilities to generate, persist, and load customer samples
following the CSV contract defined in AGENTS.md.
"""
from __future__ import annotations

from pathlib import Path
from typing import Iterable, List, Literal, Optional

import pandas as pd

from app.factories.persona_forge import PersonaForge
from app.models import Customer

CSV_COLUMNS = [
    "customer_id",
    "segment",
    "is_vocal",
    "last_purchase_days",
    "price",
    "issues_flag",
    "past_NPS",
    "first_message",
    "channel_pref",
    "churn_risk_est",
    "issue_bucket",
    "mini_story",
]


def generate_customers(
    *,
    n: int = 200,
    segments: Optional[List[Literal["VF", "VE", "NVF", "NVE"]]] = None,
    p_angry: float = 0.5,
    p_vocal: float = 0.5,
    seed: int = 42,
) -> List[Customer]:
    """
    Generate a list of Customer objects via PersonaForge.
    """
    forge = PersonaForge(seed=seed)
    return forge.generate(
        n=n,
        segments=segments,
        p_angry=p_angry,
        p_vocal=p_vocal,
    )


def customers_to_dataframe(customers: Iterable[Customer]) -> pd.DataFrame:
    """
    Convert customer objects to a DataFrame that matches the CSV schema.
    """
    rows = []
    for customer in customers:
        payload = customer.model_dump()
        # Ensure optional fields are present so downstream CSVs have stable columns.
        for column in CSV_COLUMNS:
            payload.setdefault(column, None)
        rows.append({col: payload.get(col) for col in CSV_COLUMNS})

    df = pd.DataFrame(rows, columns=CSV_COLUMNS)
    # Cast booleans/ints explicitly to avoid surprises when saving/loading.
    if not df.empty:
        df["is_vocal"] = df["is_vocal"].astype(bool)
        df["issues_flag"] = df["issues_flag"].astype(int)
        df["past_NPS"] = df["past_NPS"].astype(int)
    return df


def save_dataset(customers: Iterable[Customer], path: Path) -> Path:
    """
    Persist customer dataset to CSV.
    """
    df = customers_to_dataframe(customers)
    path = Path(path)
    path.parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(path, index=False)
    return path


def load_customers(path: Path) -> List[Customer]:
    """
    Load customers from CSV generated by save_dataset().
    """
    df = pd.read_csv(path)
    customers: List[Customer] = []
    for row in df.to_dict(orient="records"):
        # Pandas may coerce NaNs to floats; convert to native Python types.
        row["is_vocal"] = bool(row.get("is_vocal", False))
        row["issues_flag"] = int(row.get("issues_flag", 0))
        row["past_NPS"] = int(row.get("past_NPS", 0))
        row["last_purchase_days"] = int(row.get("last_purchase_days", 0))
        row["price"] = float(row.get("price", 0.0))
        row["churn_risk_est"] = float(row.get("churn_risk_est", 0.0))

        # Replace NaN-like with None for optional fields.
        for optional_key in ("first_message", "issue_bucket", "mini_story"):
            value = row.get(optional_key)
            if pd.isna(value):
                row[optional_key] = None

        customers.append(Customer(**row))

    return customers


__all__ = [
    "generate_customers",
    "customers_to_dataframe",
    "save_dataset",
    "load_customers",
    "CSV_COLUMNS",
]
